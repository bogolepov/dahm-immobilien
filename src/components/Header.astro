---
import { Icon } from 'astro-icon/components'

const pathname: string = new URL(Astro.request.url).pathname;
const currentPath: string[] = pathname.split("/").filter(Boolean);

import BurgerButton from "@components/burger_button/burger_button.astro";

import Dahm from "@data/dahm.json"

---

<style>
  header {
    --hover-menu-background-color: rgba(220, 220, 220, 0.45);
    --hover-item-background-color: rgba(169, 169, 169, 0.95);
    /* --menu-opaque-background-color: rgba(203, 203, 203, 0.95); */
    /* --menu-opaque-background-color: rgba(184, 199, 215, 0.95); */
    --menu-opaque-background-color: rgba(140, 140, 140, 0.95);
    /* --submenu-background-color: rgba(215, 215, 215, 0.95); */
    --submenu-background-color: rgba(229, 232, 236, 0.95);
    --header-font-color: #373737;
    --border-left-thick-active-item: 2px;

    width: 100%;
    height: min-content;
    max-width: 100vw;
    top: 0;
    align-items: center;
    z-index: 100;
    position: fixed;
    -webkit-backdrop-filter: blur(9px);
    backdrop-filter: blur(9px);
    font-weight: 500;
    transition: 
      background-color 500ms ease-in-out,
      border-color 500ms ease-in-out;
  }
  header.opaque {
    background-color: var(--menu-opaque-background-color);
    /* border-bottom: 3px solid var(--color-dahm-grey); */
    --header-font-color: #000000;
    --submenu-background-color: var(--menu-opaque-background-color);
    /* background-color: var(--background-color-toolbar); */
  }
  @supports (font-variation-settings: 'wdth' 115) {
    header {
      font-size: calc(var(--font-size) * 0.85);
      font-weight: 540;
      font-stretch: 103%;
      font-optical-sizing: auto;
    }
  }

  nav {
    --padding-x-item: 0.65em;
    --padding-y-item: 0.15em;
  }

  .nav-list {
    display: flex;
    flex-direction: row;
    justify-content: flex-start;
    list-style: none;
    align-items: stretch;
    height: 100%;
    color: var(--header-font-color);
  }
  .nav-list > li {
    position: relative;
    min-height: 100%;
    padding: var(--padding-y-item) var(--padding-x-item);
  }
  .nav-list > li > div {
    height: 100%;
    display: flex;
    align-items: center;
  }
  .nav-list > li .active_link {
    text-decoration: 1.5px var(--color-marker) underline;
    text-underline-offset: 0.4em;
    text-decoration-skip-ink: none;
  }

  .nav-submenu {
    position: absolute;
    left: 0;
    top: 100%;
    /* backdrop-filter: blur(9px); */
    background-color: var(--submenu-background-color);
    /* background-color: var(--menu-opaque-background-color); */
    transform-origin: 0 0;
    transition: 
      transform 0.5s ease-in-out,
      background-color 500ms ease-in-out;
  }
  .nav-submenu > li {
    padding: 0.5em calc(1.5 * var(--padding-x-item)) 0.5em calc(2 * var(--padding-x-item));
    /* padding: var(--padding-x-item);
    padding-left: calc(3 * var(--padding-x-item)); */
  }
  .nav-submenu > li > * {
    padding-left: calc( 0.8 * var(--padding-x-item) + var(--border-left-thick-active-item) + var(--border-left-thick-active-item));
  }
  .nav-submenu > li > .active_link {
    padding-left: calc( 0.8 * var(--padding-x-item) + var(--border-left-thick-active-item));
    text-decoration: none;
    border-left: 2px solid var(--color-marker);
  }

  li.menu-item-desktop > div a {
    padding-top: 0.8em;
    padding-bottom: 0.8em;
  }

  .nav-list li,
  .mobile-menu li {
    transition:
      color 500ms ease-out,
			background-color 400ms ease-in-out;
  }

  .menu-item-desktop {
    display: none;
  }
  .logo {
    margin: auto 0;
    padding: 0 1em;

  }
  .nav-logo-text {
    display: block;
    width: calc(var(--font-size) * 3.5);
  }
  .logo svg {
    height: var(--header-height);
  }
  .h2em {
    min-height: 2.25em;
    min-width: 2.25em;
  }
  .round-border {
    border: 1px solid #3737375d;
    border-radius: 9999px;
    transition: border-color 500ms ease-out;

  }
  .phone-number-text {
    padding: 0.2em 0.5em;
    display: none;
  }
  @media screen and (min-width: 695px) {
    .phone-icon {
      display: none;
    }
    .phone-number-text {
      display: block;
    }
  }
  .phone-number svg,
  .email-address svg {
    width: 2em;
    height: 1.15em;
  }
  
  .item-menu-mobile {
    display: block;
  } 
  .item-menu-mobile > .round-border {
      padding: 0 0.5em;
  } 

  .mobile-menu-layer {
    display: none;
    position: fixed;
    left: 0;
    top: 0;
    width: 100%;
    bottom: 0;
    z-index: 90;
    -webkit-backdrop-filter: blur(15px);
    backdrop-filter: blur(15px);
  }

  .mobile-menu {
    --hover-item-background-color: rgba(169, 169, 169, 0.95);
    --menu-background-color: rgba(229, 232, 236, 0.55);
    --padding-x-text: 0.6em;
    --border-thick-active-item: 3px;
    --padding-x-left-item0: calc(1.5 * var(--padding-x-item));

    display: flex;
    flex-direction: column;
    width: 100%;
    height: 100%;
    align-items: start;
    padding-top: calc( var(--header-height) + var(--padding-y-item));
    font-size: calc(var(--font-size) * 1.3);
    background-color: var(--ho);
    background-color: var(--menu-background-color);
  }
  .mobile-menu > li {
    width: 100%;
  }
  .mobile-menu > li > div {
    padding: calc(2 * var(--padding-y-item)) 0;
    padding-left: var(--padding-x-left-item0);
    width: 100%;
  }
  .mobile-menu ul > li {
    padding: calc(2 * var(--padding-y-item)) 0;
    padding-left: calc( var(--padding-x-left-item0) + var(--padding-x-text) + var(--border-thick-active-item));
    width: 100%;
  }

  .mobile-menu a,
  .mobile-menu span {
    padding-left: calc( var(--padding-x-text) + var(--border-thick-active-item));
  }
  .mobile-menu a.active_link {
    padding-left: var(--padding-x-text);
    border-left: var(--border-thick-active-item) solid var(--color-marker);
  }

  @media screen and (max-width: 590px) {
    body:has(#burger-button:checked) .mobile-menu-layer {
      display: block;      
    }
    body:has(#burger-button:checked) header {
      background-color: var(--menu-opaque-background-color);
      --header-font-color: #000000;
      --submenu-background-color: var(--menu-opaque-background-color);
    }
  }
  @media screen and (min-width: 590px) {
    .menu-item-desktop {
      display: block;
    }
    .item-menu-mobile {
      display: none;
    }
    .mobile-menu-layer {
      display: none;
    }
    li:has(.email-address) {
      padding-right: 1.5em;
    }
  }

  @media (hover: hover) {
    header:is(:not(.opaque)):hover {
      background-color: var(--hover-menu-background-color);
    }
    .nav-list > li:not(.flex-spreader):has(div > a:hover) {
      color: var(--color-dahm-bordo);
      background-color: var(--hover-item-background-color);
    }
    .round-border:hover {
      border-color: var(--color-dahm-bordo);
    }
    .nav-list > li:has(ul):not(:hover, :has(a:focus-visible)) ul {
      transition: transform 0s ease-in-out;
      transform: scaleY(0);
    }
    .nav-list ul > li:not(:hover) {
      color: var(--header-font-color);
    }
    .nav-list ul > li:hover,
    .mobile-menu > li > div:hover:has(a),
    .mobile-menu ul > li:hover:has(a) {
      color: var(--color-dahm-bordo);
      background-color: var(--hover-item-background-color);
    }
  }

  a:focus-visible {
    outline: none;
  }
  a:focus-visible .fv,
  .fv:focus-visible,
  .fv:has(a:focus-visible),
  .fv:has(input:focus-visible) {
    outline: 1px solid var(--color-dahm-bordo);
    outline-offset: 0;
  }

</style>

<header>
  <nav>
    <ul class="nav-list">
      <li class="logo fv">
        <div>
          <a href={"/"} aria-label={Dahm.company_name}>
            <Icon name="logo-text" class="nav-logo-text" size="1rem" />
          </a>
        </div>
      </li>
      {
        Dahm.menu.map(menuItem => {
          const menuItemURL = menuItem.root ? `/` : (menuItem.url ? `/${menuItem.url}/` : null);
          return(
            <li class="menu-item-desktop" class:list={[{fv: menuItem.url || menuItem.root }]}>
              <div>
              {
                menuItemURL &&
                <a href={menuItemURL} class:list={[{active_link: (currentPath.length === 0 && menuItem.root) || (currentPath.length > 0 && currentPath[0] === menuItem.url) }]}>
                  {menuItem.name.toUpperCase()}
                </a>
              }
              {
                !menuItemURL &&
                <span class:list={[{active_link: currentPath.length > 0 && currentPath[0] === menuItem.folder }]}>
                  {menuItem.name.toUpperCase()}
                </span>
              }
              </div>
            {
              menuItem.submenu &&
              <ul class="nav-submenu">
                {
                  menuItem.submenu &&
                  menuItem.submenu.map(submenuItem  => {
                    const submenuItemURL = `/${menuItem.folder}/${submenuItem.url}/`;
                    return (
                      <li class="fv">
                        <a href={submenuItemURL} class:list={[{active_link: currentPath.length > 0 && currentPath[0] === menuItem.folder && currentPath[1] === submenuItem.url }]}>
                          {submenuItem.name.toUpperCase()}
                        </a>
                      </li>
                    );
                  })
                }
              </ul>
            }
            </li>
          );
        })
      }
      <li class="flex-spreader"></li>
      <li>
        <div>
          <a class="flex-center round-border h2em phone-number fv" href={"tel: " + Dahm.telephone}>
            <span class="phone-number-text">{Dahm.telephone}</span>
            <Icon name="phone" class="phone-icon" />
          </a>
        </div>
      </li>
      <li>
        <div>
          <a class="flex-center round-border h2em email-address fv" href={"mailto: " + Dahm.email}>
            <Icon name="email" />
          </a>
        </div>     
      </li>
      <li class="item-menu-mobile">
        <div>
          <div class="flex-center round-border h2em fv" >
            <BurgerButton id="burger-button"/>
          </div>
        </div>
      </li>
    </ul>
  </nav>
</header>
<nav>
  <div class="mobile-menu-layer">
    <ul class="mobile-menu">
    {
      Dahm.menu.map(menuItem => {
        const menuItemURL = menuItem.root ? `/` : (menuItem.url ? `/${menuItem.url}/` : null);
        return(
          <li>
            <div class="fv">
            {
              menuItemURL &&
              <a href={menuItemURL} class:list={[{active_link: (currentPath.length === 0 && menuItem.root) || (currentPath.length > 0 && currentPath[currentPath.length-1] === menuItem.url) }]}>
                {menuItem.name}
              </a>
            }
            {
              !menuItemURL &&
              <span class:list={[{active_link: currentPath.length > 0 && currentPath[0] === menuItem.folder }]}>
                {menuItem.name}
              </span>
            }
            </div>
            {
              menuItem.submenu &&
              <ul>
                {
                  menuItem.submenu &&
                  menuItem.submenu.map(submenuItem  => {
                    const submenuItemURL = `/${menuItem.folder}/${submenuItem.url}/`;
                    return (
                      <li class="fv">
                        <a href={submenuItemURL} class:list={[{active_link: currentPath.length > 0 && currentPath[0] === menuItem.folder && currentPath[1] === submenuItem.url }]}>
                          {submenuItem.name}
                        </a>
                      </li>
                    );
                  })
                }
              </ul>
            }
          </li>
        );
      })
    }
    </ul>
  </div>
</nav>

<script is:inline>
  const header = document.querySelector('header');
  window.addEventListener(
    "scroll",
    () => {
      if (window.scrollY >= 25) {
        header.classList.add("opaque")
      } else {
        header.classList.remove("opaque");
      }
    });
</script>