---
import '@components/header/header.css';
import { Icon } from 'astro-icon/components';

const { errorPage } = Astro.props;

const pathname: string = new URL(Astro.request.url).pathname;
const currentPath: string[] = pathname.split('/').filter(Boolean);

import BurgerButton from '@components/burger_button/burger_button.astro';

import Dahm from '@data/dahm.json';

import type { ImageMetadata } from 'astro';
import { Picture } from 'astro:assets';
const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/*.{jpeg,jpg,png}');

// <Picture class:list={'image-h'} src={images['/src/assets/logo.png']()} widths={[591]} alt='Logo' />;
---

<header>
	<nav>
		<ul class='nav-list'>
			<li class='logo fv'>
				<div>
					<a href={'/'} aria-label={Dahm.company_name}>
						<Icon name='logo2025' class='image-h' />
					</a>
				</div>
			</li>
			{
				Dahm.web_menu.map(menuItem => {
					const menuItemURL = menuItem.root ? `/` : menuItem.url ? `/${menuItem.url}/` : null;
					return (
						<li class='item-menu desktop' class:list={[{ fv: menuItem.url || menuItem.root }]}>
							<div>
								{menuItemURL && (
									<a
										href={menuItemURL}
										class:list={[
											{
												active_link:
													!errorPage &&
													((currentPath.length === 0 && menuItem.root) ||
														(currentPath.length > 0 && currentPath[0] === menuItem.url)),
											},
										]}
									>
										{menuItem.name.toUpperCase()}
									</a>
								)}
								{!menuItemURL && (
									<span
										class:list={[
											{ active_link: !errorPage && currentPath.length > 0 && currentPath[0] === menuItem.folder },
										]}
									>
										{menuItem.name.toUpperCase()}
									</span>
								)}
							</div>
							{menuItem.submenu && (
								<ul class='nav-submenu'>
									{menuItem.submenu &&
										menuItem.submenu.map(submenuItem => {
											const submenuItemURL = `/${menuItem.folder}/${submenuItem.url}/`;
											return (
												<li class='fv'>
													<a
														href={submenuItemURL}
														class:list={[
															{
																active_link:
																	!errorPage &&
																	currentPath.length > 0 &&
																	currentPath[0] === menuItem.folder &&
																	currentPath[1] === submenuItem.url,
															},
														]}
													>
														{submenuItem.name.toUpperCase()}
													</a>
												</li>
											);
										})}
								</ul>
							)}
						</li>
					);
				})
			}
			<!-- <li class='flex-spreader'></li> -->
			<li class='item-phonenumber'>
				<div>
					<a class='flex-center round-border h2em icon fv' href={'tel: ' + Dahm.telephone}>
						<span class='phone-number-text'>{Dahm.telephone}</span>
						<!-- <Icon name='phone' class='phone-icon' /> -->
					</a>
				</div>
			</li>
			<!-- <li>
				<div>
					<a class='flex-center round-border h2em icon fv' href={'mailto: ' + Dahm.email}>
						<Icon name='email' />
					</a>
				</div>
			</li> -->
			<li class='item-phoneform mobile'>
				<div>
					<button type='button' class='flex-center round-border h2em icon fv form-btn phone'>
						<Icon name='phone' />
					</button>
				</div>
			</li>
			<li class='item-messageform mobile'>
				<div>
					<button type='button' class='flex-center round-border h2em icon fv form-btn message'>
						<Icon name='email' />
					</button>
				</div>
			</li>
			<li class='item-burgermenu mobile'>
				<div>
					<div class='flex-center round-border h2em fv'>
						<BurgerButton id='burger-button' />
					</div>
				</div>
			</li>
		</ul>
	</nav>
</header>
<nav class='mobile-menu-layer'>
	<ul class='mobile-menu'>
		{
			Dahm.web_menu.map(menuItem => {
				const menuItemURL = menuItem.root ? `/` : menuItem.url ? `/${menuItem.url}/` : null;
				return (
					<li>
						<div class='fv'>
							{menuItemURL && (
								<a
									href={menuItemURL}
									class:list={[
										{
											active_link:
												!errorPage &&
												((currentPath.length === 0 && menuItem.root) ||
													(currentPath.length > 0 && currentPath[currentPath.length - 1] === menuItem.url)),
										},
									]}
								>
									{menuItem.name}
								</a>
							)}
							{!menuItemURL && (
								<span
									class:list={[
										{ active_link: !errorPage && currentPath.length > 0 && currentPath[0] === menuItem.folder },
									]}
								>
									{menuItem.name}
								</span>
							)}
						</div>
						{menuItem.submenu && (
							<ul class='mobile-submenu'>
								{menuItem.submenu &&
									menuItem.submenu.map(submenuItem => {
										const submenuItemURL = `/${menuItem.folder}/${submenuItem.url}/`;
										return (
											<li class='fv'>
												<a
													href={submenuItemURL}
													class:list={[
														{
															active_link:
																!errorPage &&
																currentPath.length > 0 &&
																currentPath[0] === menuItem.folder &&
																currentPath[1] === submenuItem.url,
														},
													]}
												>
													{submenuItem.name}
												</a>
											</li>
										);
									})}
							</ul>
						)}
					</li>
				);
			})
		}
	</ul>
</nav>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		const header = document.querySelector('header');
		if (header) {
			const headerOpaqueStatus = () => {
				if (window.scrollY >= 25) {
					if (!header.classList.contains('opaque')) header.classList.add('opaque');
				} else {
					if (header.classList.contains('opaque')) header.classList.remove('opaque');
				}
			};
			headerOpaqueStatus();

			window.addEventListener('scroll', () => {
				headerOpaqueStatus();
			});

			window.setTimeout(() => {
				header.classList.add('loaded');
			}, 1500);
		}

		const burgerSwitcher = document.querySelector('#burger-button');
		const sbCards = document.querySelectorAll('.sb-card');
		const openFormButtons = document.querySelectorAll('.form-btn');

		if (burgerSwitcher) {
			window.addEventListener('blur', () => {
				burgerSwitcher.checked = false;
			});

			burgerSwitcher.addEventListener('click', () => {
				if (burgerSwitcher.checked) {
					sbCards.forEach(tmpCard => tmpCard.classList.remove('open'));
				}
			});
		}

		const changeCardState = (cardName: string) => {
			sbCards.forEach(card => {
				if (card.classList.contains(cardName)) {
					if (card.classList.contains('open')) {
						card.classList.remove('open');
						card.querySelector('.card-wrapper')?.setAttribute('inert', '');
					} else {
						sbCards.forEach(tmpCard => {
							tmpCard.classList.remove('open');
							tmpCard.querySelector('.card-wrapper')?.setAttribute('inert', '');
						});
						if (burgerSwitcher) burgerSwitcher.checked = false;
						card.classList.add('open');
						card.querySelector('.card-wrapper')?.removeAttribute('inert');
					}
				}
			});
		};
		openFormButtons.forEach(btn => {
			btn.addEventListener('click', () => {
				if (btn.classList.contains('phone')) return changeCardState('phone');
				else if (btn.classList.contains('message')) return changeCardState('message');
			});
		});
	});
</script>
