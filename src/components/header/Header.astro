---
import '@components/header/header.css'
import { Icon } from 'astro-icon/components'

const pathname: string = new URL(Astro.request.url).pathname;
const currentPath: string[] = pathname.split("/").filter(Boolean);

import BurgerButton from "@components/burger_button/burger_button.astro";

import Dahm from "@data/dahm.json"

import type { ImageMetadata } from 'astro';
import { Picture } from 'astro:assets';
const images = import.meta.glob<{ default: ImageMetadata }>('/src/assets/*.{jpeg,jpg,png}');

// <Icon name="logo-text" class="nav-logo-text" size="1rem" />
---

<!-- <script>
function closeAllBurgerItems() {
	let allOpenedSubmenus = document.querySelectorAll('.main-menu-item[data-state="opened"]');
	allOpenedSubmenus?.forEach(item => (item.dataset.state = ''));
}

function initHeaderSubMenuListener() {
	let mobileMainMenu = document.querySelector('.main-menu.mobile');
	let handleClickMenuItem = function (event) {
		let elem = event.target.closest('.main-menu-item');
		if (elem) {
			if (elem.dataset.state === 'opened') elem.dataset.state = '';
			else elem.dataset.state = 'opened';
		}
	};
	if (mobileMainMenu) {
		let expandingMenuItems = mobileMainMenu.querySelectorAll('.menu-item-label:has(.submenu-icon)');
		expandingMenuItems?.forEach(item => item.addEventListener('click', handleClickMenuItem));

		let submenuButtons = mobileMainMenu.querySelectorAll('.submenu-icon');
		submenuButtons?.forEach(button => {
			button.tabIndex = 0;
			button.addEventListener('keydown', event => {
				if (event.code === 'Enter' || event.code === 'Space') {
					event.preventDefault();
					handleClickMenuItem(event);
				}
			});
		});
	}

	let burgerSwitcher = document.querySelector('#burger-button');

	burgerSwitcher.addEventListener('change', () => {
		if (burgerSwitcher.checked === false) {
			closeAllBurgerItems();
		}
	});

	window.addEventListener('blur', () => {
		burgerSwitcher.checked = false;
		closeAllBurgerItems();
	});
}
	document.addEventListener('DOMContentLoaded', () => {
		initHeaderSubMenuListener();
	});
</script> -->

<header>
  <nav>
    <ul class="nav-list">
      <li class="logo fv">
        <div>
          <a href={"/"} aria-label={Dahm.company_name}>
            <Picture 
              class:list={'image-h'} 
              src={images["/src/assets/logo.png"]()} 
              widths={[591]}
              alt="Logo" />
          </a>
        </div>
      </li>
      {
        Dahm.menu.map(menuItem => {
          const menuItemURL = menuItem.root ? `/` : (menuItem.url ? `/${menuItem.url}/` : null);
          return(
            <li class="menu-item-desktop" class:list={[{fv: menuItem.url || menuItem.root }]}>
              <div>
              {
                menuItemURL &&
                <a href={menuItemURL} class:list={[{active_link: (currentPath.length === 0 && menuItem.root) || (currentPath.length > 0 && currentPath[0] === menuItem.url) }]}>
                  {menuItem.name.toUpperCase()}
                </a>
              }
              {
                !menuItemURL &&
                <span class:list={[{active_link: currentPath.length > 0 && currentPath[0] === menuItem.folder }]}>
                  {menuItem.name.toUpperCase()}
                </span>
              }
              </div>
            {
              menuItem.submenu &&
              <ul class="nav-submenu">
                {
                  menuItem.submenu &&
                  menuItem.submenu.map(submenuItem  => {
                    const submenuItemURL = `/${menuItem.folder}/${submenuItem.url}/`;
                    return (
                      <li class="fv">
                        <a href={submenuItemURL} class:list={[{active_link: currentPath.length > 0 && currentPath[0] === menuItem.folder && currentPath[1] === submenuItem.url }]}>
                          {submenuItem.name.toUpperCase()}
                        </a>
                      </li>
                    );
                  })
                }
              </ul>
            }
            </li>
          );
        })
      }
      <li class="flex-spreader"></li>
      <li>
        <div>
          <a class="flex-center round-border h2em phone-number fv" href={"tel: " + Dahm.telephone}>
            <span class="phone-number-text">{Dahm.telephone}</span>
            <Icon name="phone" class="phone-icon" />
          </a>
        </div>
      </li>
      <li>
        <div>
          <a class="flex-center round-border h2em email-address fv" href={"mailto: " + Dahm.email}>
            <Icon name="email" />
          </a>
        </div>     
      </li>
      <li class="item-menu-mobile">
        <div>
          <div class="flex-center round-border h2em fv" >
            <BurgerButton id="burger-button"/>
          </div>
        </div>
      </li>
    </ul>
  </nav>
</header>
<nav>
  <div class="mobile-menu-layer">
    <ul class="mobile-menu">
    {
      Dahm.menu.map(menuItem => {
        const menuItemURL = menuItem.root ? `/` : (menuItem.url ? `/${menuItem.url}/` : null);
        return(
          <li>
            <div class="fv">
            {
              menuItemURL &&
              <a href={menuItemURL} class:list={[{active_link: (currentPath.length === 0 && menuItem.root) || (currentPath.length > 0 && currentPath[currentPath.length-1] === menuItem.url) }]}>
                {menuItem.name}
              </a>
            }
            {
              !menuItemURL &&
              <span class:list={[{active_link: currentPath.length > 0 && currentPath[0] === menuItem.folder }]}>
                {menuItem.name}
              </span>
            }
            </div>
            {
              menuItem.submenu &&
              <ul>
                {
                  menuItem.submenu &&
                  menuItem.submenu.map(submenuItem  => {
                    const submenuItemURL = `/${menuItem.folder}/${submenuItem.url}/`;
                    return (
                      <li class="fv">
                        <a href={submenuItemURL} class:list={[{active_link: currentPath.length > 0 && currentPath[0] === menuItem.folder && currentPath[1] === submenuItem.url }]}>
                          {submenuItem.name}
                        </a>
                      </li>
                    );
                  })
                }
              </ul>
            }
          </li>
        );
      })
    }
    </ul>
  </div>
</nav>

<script is:inline>
  const header = document.querySelector('header');
  window.addEventListener(
    "scroll",
    () => {
      if (window.scrollY >= 25) {
        header.classList.add("opaque")
      } else {
        header.classList.remove("opaque");
      }
    });
</script>